#!/usr/bin/env perl

use 5.006002;

use strict;
use warnings;

use version;

use constant CPANM	=> 'cpanm';
use constant IS_WINDOWS	=> { 
        MSWin32     => 1,
        dos         => 1,
    }->{$^O} || '';
use constant IS_UNIX	=> IS_WINDOWS ? '' : 1;
use constant PERL_5_10  => version->parse( 'v5.10.0' );
use constant PERL_5_12  => version->parse( 'v5.12.0' );
use constant THIS_PERL  => version->parse( $] );

our $VERSION = '0.054';

unless ( caller ) {
    require Getopt::Long;
    Getopt::Long->VERSION( 2.33 );
    Getopt::Long->import( qw{ :config auto_version } );
    Getopt::Long->import( qw{ GetOptions } );

    my %opt;

    GetOptions( \%opt,
        qw{ verbose! },
	help => sub { my_pod2usage( { -verbose => 2 } ) },
    ) or do {
	my_pod2usage( { -verbose => 0 } );
    };

    @ARGV
	or @ARGV = ( 'environment' );

    ( my $cmd = lc $ARGV[0] ) =~ tr/-/_/;

    my $code = __PACKAGE__->can( "cmd_$cmd" )
	or die "Invalid command '$cmd'\n";

    $code->( \%opt, @ARGV );
}

sub cmd_environment {
    my ( $opt, @arg ) = @_;

    my %env = (
        MY_HOME             => get_home(),
        MY_IS_GITHUB_ACTION => 1,
        MY_IS_UNIX          => IS_UNIX,
        MY_IS_WINDOWS       => IS_WINDOWS,
	MY_TOOLS	    => '.github/workflows/tools',
    );

    IS_WINDOWS
        and @env{ qw{ LINES COLUMNS } } = ( 24, 80 );

    my $env_text;
    $env_text .= "$_=$env{$_}\n" for sort keys %env;

    $opt->{verbose} and print $env_text;

    defined $ENV{GITHUB_ENV}
        and $ENV{GITHUB_ENV} ne ''
        or die "Environment variable GITHUB_ENV undefined or empty\n";
    open my $fh, '>>:encoding(utf-8)', $ENV{GITHUB_ENV}
        or die "Can not open $ENV{GITHUB_ENV}: $!\n";

    print { $fh } $env_text;

    close $fh;

    return;
}

# Non-core toolchain Module::Build needs Pod::Man, which is in distro
# RRA/podlators. As of podlators-5.00 (2022-11-25) this requires Perl
# 5.10. As of Module::Build 0.4232 (2022-12-08) the dependency on
# Pod::Man has been dropped to deal with 5.8, presumably since it's a
# core module. But we need at least Pod::Man 2.16 to cope with
# t/manifypods_with_utf8.t, and Perl 5.10 only comes with 2.16. So ..
sub cmd_install_podlators {
    my ( $opt, undef, $perl_ver ) = @_;
    defined $perl_ver
	or $perl_ver = THIS_PERL;
    $perl_ver ge PERL_5_12
	and return;

    my $podlator = $perl_ver lt PERL_5_10 ?
	'RRA/podlators-4.14.tar.gz' :
	'RRA/podlators-5.01.tar.gz';

    my_exec( $opt, CPANM, $podlator );
    return;
}

sub cmd_make {
    my ( $opt, undef, @arg ) = @_;
    our %Config;
    require Config;
    Config->import();
    my_exec( $opt, $Config{make}, @arg );
    return;
}

# The following technique from Gabor Szabo. Thanks:
# https://perlmaven.com/install-developer-dependencies-first-test-css
sub cmd_show_log {
    require File::Glob;
    require File::Spec;
    my @path = File::Glob::bsd_glob( File::Spec->catfile(
	    get_home(), qw{ .cpanm work * build.log } ) )
	or die "Unable to find build.log\n";

    @path = map { $_->[0] }
	sort { $a->[1] <=> $b->[1] }
	map { [ $_, ( stat $_ )[9] ] }
	@path;

    foreach ( @path ) {
	print "\n$_\n";
	open my $fh, '<', $_
	    or die "Unable to open $_: $!\n";
	local $_ = undef;
	while ( <$fh> ) {
	    print;
	}
	close $fh;
    }

    return;
}

{
    my $my_home;
    sub get_home {
	unless ( defined $my_home ) {
	    local $@ = undef;
	    eval {
		require File::HomeDir;
		$my_home = File::HomeDir->my_home();
		print "Home from File::HomeDir\n";
		1;
	    } or do {
		$my_home = $ENV{HOME};
		print "Home from \$HOME\n";
	    };
	}
	return $my_home;
    }

}

sub my_exec {
    my ( $opt, $cmd, @arg ) = @_;
    $opt ||= {};
    $opt->{verbose}
	and print "\$ $cmd @arg\n";
    exec { $cmd } $cmd, @arg;
    die "Exec $cmd failed: $!\n";
}

sub my_pod2usage {
    my @arg = @_;
    require Pod::Usage;
    Pod::Usage::pod2usage( @arg );
    return;
}

1;

__END__

=head1 TITLE

tools - Helper for GitHub Woekflows

=head1 SYNOPSIS

 tools
 tools --help
 tools --version

=head1 OPTIONS

=head2 --help

This option displays the documentation for this script. The script then
exits.

=head2 --verbose

If this Boolean option is asserted, more output may be produced, though
actual functionality will not changed. The author makes no commitment as
to what this outout is. I<Caveat user.>

The default is C<--no-verbose>.

=head2 --version

This option displays the version of this script. The script then exits.

=head1 DETAILS

This Perl script implements a collection of more-or-less unrelated
commands useful for testing Perl modules under GitHub Workflows. For
spme reason now unknown to me, it is implemented as a modulino.

Each invocation of the script executes one command. The name of the
command is the first argument; all other arguments are as required by
the command.

Command names are not case-sensitive.

=head1 COMMANDS

The following commands are implemented:

=head2 environment

This command defines environment variables, using the GitHub-defined
mechanism of writing them to the file whose path is contained in
environment variable C<GITHUB_ENV>. It is an error if this environment
variable does not exist.

If L<--verbose|/--verbose> is asserted, the variables and their values
are displayed on C<STDOUT>.

The following environment variables are defined:

=over

=item MY_HOME: the home directory

=item MY_IS_GITHUB_ACTION: 1

=item MY_IS_UNIX: C<1> under Unix, C<''> otherwise

=item MY_IS_WINDOWS: C<1> under Windows, C<''> otherwise

=item MY_TOOLS: the path of this file

=back

=head2 install_podlators

This command B<may> C<exec> a C<cpanm> command to install POD support
modules. Under Perl 5.12, or above, it does nothing, Under Perl 5.10 it
installs C<Pod::Man>. Otherwise it installs
C<RRA/podlators-4.14.tar.gz>.

=head2 make

This command does an C<exec> on the program defined in C<$Config{make}>.
Arguments (if any) are passed to that program. If you want to pass any
options, you must specify C<--> before the first such, or this script
will attempt to eat them, and get indigestion.

=head2 show_log

This command displays the name of the C<cpanm> log, along with its
contents. Only the first-found is displayed.

=head1 AUTHOR

Thomas R. Wyant, III F<wyant at cpan dot org>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2024 by Thomas R. Wyant, III

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory LICENSES.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut

# ex: set textwidth=72 :
